		Atomthreads on Realview PB-A8 Guest

Atomthreads is a free, lightweight, portable, real-time scheduler for 
embedded systems. Please visit: http://atomthreads.com/ for more details.

The Realview PB-A8 port of atomthreads is still not released officially, but
you can obtain the sources from: https://github.com/avpatel/atomthreads-arm

Atomthreads uses all the CPU & Hardware features except Memory managment unit
(MMU) and Floating point unit (FPU).

Please follow the steps below to build & run Atomthreads on Realview PB-A8:

  [1. Build environment for Xvisor]
  # CROSS_COMPILE=arm-none-eabi-; cd <xvisor_source_directory>

  [2. Configure Xvisor with Realview PB-A8 default settings]
  # make ARCH=arm pb-a8-defconfig 

  [3. Build Xvisor]
  # make

  [4. Build Basic Test Code]
  # make -C tests/armv7a/pb-a8/basic

  [5. Build environment for atomthreads]
  # CROSS_COMPILE=arm-none-eabi-; cd <atomthreads_source_directory>/ports/armv7a

  [6. Build Atomthreads]
  # make

  [7. Patch Atomthreads objects to replace sensitive non-priviledged instructions]
  # <xvisor_source_directory>/arch/arm/cpu/armv7a/elf2cpatch.py -f build/arm_entry.o .expvect | <xvisor_source_directory>/build/tools/cpatch/cpatch32 build/arm_entry.o 0
  # <xvisor_source_directory>/arch/arm/cpu/armv7a/elf2cpatch.py -f build/arm_irq.o .expvect | <xvisor_source_directory>/build/tools/cpatch/cpatch32 build/arm_irq.o 0
  # <xvisor_source_directory>/arch/arm/cpu/armv7a/elf2cpatch.py -f build/atomport-asm.o .expvect | <xvisor_source_directory>/build/tools/cpatch/cpatch32 build/atomport-asm.o 0

  [8. Rebuild Atomthreads to reflect changed object files]
  # make

  [9. Create qemu.img (from vmm.bin, arm_test.bin.patched and kern1.bin) for running it on QEMU]
  # <xvisor_source_directory>/tools/scripts/memimg.py -a 0x10000 -o build/qemu.img <xvisor_source_directory>/build/vmm.bin@0x10000 <xvisor_source_directory>/build/tests/armv7a/pb-a8/basic/arm_test.bin.patched@0x800000 build/kern1.bin@0x900000

  [10. Launch QEMU]
  # qemu-system-arm -M realview-pb-a8 -display none -serial stdio -kernel build/qemu.img

  [11. Kick Guest for starting Basic Test]
  XVisor# guest kick -1

  [12. Bind to virtual UART]
  XVisor# vserial bind guest0/uart0

  [13. Copy atomthreads binary from NOR flash to DDR]
  [guest0/uart0] arm-test# copy 0x100000 0x40100000 0x20000

  [14. Start atomthreads]
  [guest0/uart0] arm-test# go 0x100000

  [15. Enter character seqence 'ESCAPE+x+q" return to Xvisor prompt]
  [guest0/uart0] 

  (Note: replace all <> brackets based on your workspace)
  (Note: step 9. uses build/kern1.bin test case instead of this you can use 
   build/kern2.bin, ..., build/mutex1.bin, ..., etc. test cases)
  (Note: step 13. & step 14. assume that text base address for atomthreads
   binary is 0x100000. You can change this in atomthreads source and modify
   the above steps accordingly.)

